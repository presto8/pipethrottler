#!/usr/bin/env python

# similar to cat except automatically throttles to keep CPU load beneath a specified level

# LICENSE
#
#   Copyright 2014 Preston Hunt <me@prestonhunt.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# start cpu monitor in thread
# cpu monitor updates cpu load every 1 second
# start cat in main thread, read-write 4k chunks
# if cpu load is above threshold, throttle using binary exponential backoff algorithm

import sys, psutil, threading, time, random, argparse, math
import datetime

debug_quiet = False # command line --quiet can change this
def debug(*args):
    if not debug_quiet:
        print(*args, file=sys.stderr)

def get_ms():
    return int(round(time.time() * 1000))

def read_write_sleep(bufsize, secs):
    time_ms = secs * 1000
    start_ms = get_ms()
    buf = sys.stdin.buffer.read(bufsize)
    if buf == b'':
        return False
    sys.stdout.buffer.write(buf)
    elapsed_ms = get_ms() - start_ms
    need_ms = time_ms - elapsed_ms
    if need_ms > 0:
        time.sleep(need_ms/1000)
    return True

success_in_a_row = 0

def get_next_bufsize(cur_bufsize, curcpu, maxcpu):
    global success_in_a_row

    step = 10*1024
    if curcpu < maxcpu:
        success_in_a_row += 1
        if success_in_a_row >= 5:
            cur_bufsize += step
            success_in_a_row = 0
    elif curcpu > maxcpu:
        cur_bufsize -= step*5
        if cur_bufsize < step:
            cur_bufsize = step
        debug("cpu too high, throttling down", cur_bufsize, "     ")
    return cur_bufsize

def main(args):
    global debug_quiet
    debug_quiet = args.quiet
    debug("starting pipethrottler with max CPU limit %d" % args.maxcpu)

    bufsize = args.startbufsize * 1024
    secs = 1

    try:
        while True:
            psutil.cpu_percent(interval=0) # call first to start measuring
            if not read_write_sleep(bufsize, secs): # end-of-file reached
                break
            cpu = psutil.cpu_percent(interval=0) # second call gets CPU use since previous call
            bufsize = get_next_bufsize(bufsize, cpu, args.maxcpu)
            debug("cpu", int(cpu), "bufsize", bufsize/1024, "     ")
    except KeyboardInterrupt:
        pass

def parse_args():
    parser = argparse.ArgumentParser(description='Pass through stdin to stdout, automatically throttling if CPU load gets too high.')
    parser.add_argument('--maxcpu', type=int, help='minimum CPU limit allowed before throttling begins', default=50)
    parser.add_argument('--startbufsize', type=int, help='starting bufsize in kb', default=100)
    parser.add_argument('--quiet', action='store_true', help="don't output messages to stderr")
    p = parser.parse_args()
    return p

if __name__ == "__main__":
    args = parse_args()
    main(args)
